{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file jsonrpc.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar Jsonrpc = function Jsonrpc() {\n  // singleton pattern\n  if (arguments.callee._singletonInstance) {\n    return arguments.callee._singletonInstance;\n  }\n\n  arguments.callee._singletonInstance = this;\n  this.messageId = 1;\n};\n/**\n * @return {Jsonrpc} singleton\n */\n\n\nJsonrpc.getInstance = function () {\n  var instance = new Jsonrpc();\n  return instance;\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\n\n\nJsonrpc.prototype.toPayload = function (method, params) {\n  if (!method) console.error('jsonrpc method should be specified!');\n  return {\n    jsonrpc: '2.0',\n    method: method,\n    params: params || [],\n    id: this.messageId++\n  };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\n\n\nJsonrpc.prototype.isValidResponse = function (response) {\n  return !!response && !response.error && response.jsonrpc === '2.0' && typeof response.id === 'number' && response.result !== undefined; // only undefined is not valid json object\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\n\n\nJsonrpc.prototype.toBatchPayload = function (messages) {\n  var self = this;\n  return messages.map(function (message) {\n    return self.toPayload(message.method, message.params);\n  });\n};\n\nmodule.exports = Jsonrpc;","map":null,"metadata":{},"sourceType":"script"}