{"ast":null,"code":"// TODO: remove web3 requirement\n// Call functions directly on the provider.\nvar Web3 = require(\"web3\");\n\nvar Blockchain = {\n  parse: function parse(uri) {\n    var parsed = {};\n    if (uri.indexOf(\"blockchain://\") != 0) return parsed;\n    uri = uri.replace(\"blockchain://\", \"\");\n    var pieces = uri.split(\"/block/\");\n    parsed.genesis_hash = \"0x\" + pieces[0];\n    parsed.block_hash = \"0x\" + pieces[1];\n    return parsed;\n  },\n  asURI: function asURI(provider, callback) {\n    var web3 = new Web3(provider);\n    web3.eth.getBlock(0, function (err, genesis) {\n      if (err) return callback(err);\n      web3.eth.getBlock(\"latest\", function (err, latest) {\n        if (err) return callback(err);\n        var url = \"blockchain://\" + genesis.hash.replace(\"0x\", \"\") + \"/block/\" + latest.hash.replace(\"0x\", \"\");\n        callback(null, url);\n      });\n    });\n  },\n  matches: function matches(uri, provider, callback) {\n    uri = this.parse(uri);\n    var expected_genesis = uri.genesis_hash;\n    var expected_block = uri.block_hash;\n    var web3 = new Web3(provider);\n    web3.eth.getBlock(0, function (err, block) {\n      if (err) return callback(err);\n      if (block.hash != expected_genesis) return callback(null, false);\n      web3.eth.getBlock(expected_block, function (err, block) {\n        // Treat an error as if the block didn't exist. This is because\n        // some clients respond differently.\n        if (err || block == null) {\n          return callback(null, false);\n        }\n\n        callback(null, true);\n      });\n    });\n  }\n};\nmodule.exports = Blockchain;","map":null,"metadata":{},"sourceType":"script"}